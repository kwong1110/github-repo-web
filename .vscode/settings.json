{
  // TypeScript 관련 설정
  "typescript.preferences.importModuleSpecifier": "non-relative", // 상대 경로 대신 절대 경로로 모듈 임포트 경로 설정
  "typescript.enablePromptUseWorkspaceTsdk": true, // Workspace TypeScript SDK 사용 여부 설정
  "typescript.tsdk": "./node_modules/typescript/lib", // 로컬 TypeScript 버전 사용

  // Tailwind CSS 관련 설정
  "tailwindCSS.experimental.classRegex": [
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"], // 'cva' 함수 사용 시 클래스 인식
    ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], // 'cx' 함수 사용 시 클래스 인식
    ["cn\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"], // 'cn' 함수 사용 시 클래스 인식
    "tw`([^`]*)", // tw 클래스 사용 시 인식
    "tw\\.[^`]+`([^`]*)`", // tw.접두어로 시작하는 클래스 사용 시 인식
    "tw\\(.*?\\).*?`([^`]*)", // tw()로 감싼 클래스 인식
    ["className\\s*:\\s*['\"`]([^'\"`]*)['\"`]"] // className 속성의 클래스 인식
  ],
  "tailwindCSS.classAttributes": [
    "className",
    "class",
    "cx",
    "cn",
    ".*ClassName",
    ".*className" // Tailwind CSS 클래스명으로 인식할 수 있는 속성 설정
  ],

  // 자동 포맷팅 및 코드 정리 관련 설정
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // JavaScript 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // JavaScript React 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // TypeScript 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode", // TypeScript React 파일의 기본 포맷터를 Prettier로 설정
    "editor.formatOnSave": true, // 파일 저장 시 자동으로 포맷팅
    "editor.codeActionsOnSave": {
      "source.organizeImports": "always" // 저장 시 import 정리
    }
  },

  // 에디터 관련 설정
  "editor.tabSize": 2, // 탭 크기를 2로 설정하여 코드 들여쓰기를 2칸으로 설정

  // SCSS 관련 설정
  "scss.lint.unknownAtRules": "ignore", // SCSS에서 인식되지 않은 @규칙을 무시

  // git checkout Type 설정
  "git.checkoutType": ["remote", "tags"]
}
